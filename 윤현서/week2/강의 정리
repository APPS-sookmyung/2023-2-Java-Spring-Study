2-1.객체지향문법-객체, 인스턴스, 레퍼런스 변수
- 자바는 객체지향언어 - 컴퓨터 프로그램을 여러 개의 독립된 객체로 파악함.
(각각의 객체는 메시지를 주고받고, 데이터를 처리할 수 있음.)
- 클래스, 오브젝트, 인스턴스, 참조형 변수 
예) 컴퓨터를 만들 설계도 -> 클래스
    도면을 보고 만든 실제 책상->오브젝트/인스턴스
    인스턴스를 특별한 이름으로 부르고 싶을 떄 -> 참조형 변수 선언
    !참조되지 않는 인스턴스는 쓰레기,,
    Book b = new Book();이라는 코드가 있다면
    메모리에 Book이라는 인스턴스를 참조형 변수 b로 참조할 수 있고, Book이라는 레퍼런스 타입을 가졌다는 의미
    new로 인스턴스 생성, Book()은 생성자

2-2.클래스 선언
- 클래스는 필드, 메소드를 가짐/필드는 속성, 메소드는 기능
- class 앞 접근 제한자는 public, protected, private가 올 수 있음.
- 접근제한자 class 클래스이름{필드;생성자;메소드;}구조 
- 클래스명은 대문자 시작 권장

2-3.자판기
- 자판기는 동전넣기-잔액보여주기-물건 선택 버튼 누르기-물건 뱉기 등의 기능을 가짐.
-> 요구 사항 정의 중요함
- 자판기는 액정표시장치, 동전통 등의 객체로 구성됨.
- 액정 표시 장치는 남은 잔액을 표시하는 기능을 가짐/자판기 외에도 다른 기계에서도 사용될 수 있음
-> 프로그램을 설계할 때, 객체의 이름/클래스의 이름을 정하고, 어떤 기능을 수행할지 구상해야 함.

2-4.자판기 클래스
- static이 붙은 메소드 = 클래스 메소드 
-> 인스턴스를 생성하지 않아도 사용 가능
cf. 의존한다는 의미일 때는 점선으로 필기
- 메소드 안에서 사용되는 것은 의존한다는 뜻

2-5.필요한 수만큼만 인스턴스를 생성하자
- 인스턴스를 만드는 방법
1. new연산자, 생성자 이용 - 제일 많이 쓰는 방법
2. 클래스 로더 이용
3. 메모리에 있는 인스턴스 복제
- 메모리가 부족해지면 프로그램이 죽음,,

2-6. 메소드, 메시지 교환, 자판기에 메소드 추가
- 실제로 존재하는 객체들은 서로 관계를 맺으며 동작함
예) 콘센트에 어댑터 연결하고, 충전기로 핸드폰을 충전하듯이 객체 들끼리도 관계를 맺음
- 메시징: 어떤 객체가 다른 객체의 메소드를 호출하는 것
- 메소드가 언제, 어떻게 호출되는지, 이름을 어떻게 지을지, 어떻게 호출할지를 구상해야 함.
- 메소드는 소문자 시작 권장

2-7. 메소드 선언 방법, UML표기법
[접근제한자][static] 리턴type 메소드명([매개변수, --]){
    실행문
}
-> 메소드 선언
- 매개변수는 메소드에 전달하는 값/반환 값은 메소드가 외부로 반환하는 값
- 정수 x를 매개변수로 받아서 정수를 리턴하는 메소드는 public int class(int x){}
- 매개변수도 없고, 리턴값도 없는 메소드는 public void class(){}
- 매개변수는 있는데, 반환값은 없는 경우 public void class(int x){}
- 매개변수는 없고, 반환값은 있는 경우 public int class(){}

MathBean클래스 <UML표기법>
+ getOne() : int
+ plus(int, int) :int
+ printClassName() :void
+ printNumber(int) :void
->+는 public, :--는 반환값

2-8.메소드가 실행될 때 벌어지는 일
-JVM이 클래스를 실행하려면, 클래스를 찾아야 함 -> classpath경로에서 클래스를 찾음
-클래스를 JVM이 읽어 PREM이라고 부르는 메모리 영역에 클래스 정보를 올림. -> main메소드 탐색, 실행
- 메소드 호출-> 자바스택에 스택 엔트리 생성-> 메소드에 선언된 변수가 스택엔트리에 생성됨
- 메소드가 종료되면 자바 스택에서 제거됨 -> 메소드가 리턴한 값을 product에 저장하고 출력
- 지역 변수는 메소드가 실행될 떄 생성되고 종료될 때 사라짐. 같은 메소드를 여러 번 호출한다면 매번 다른 영역에 저장
- 동시에 메소드가 호출돼도 문제 없음.

2-9.Math클래스 만들기, 클래스 메소드 만들기(private 생성자)
- math클래스는 인스턴스는 만들 필요 없음.
- 여러 개의 인스턴스를 생성하지 못하게 해 메모리를 절약할 수 있도록 Math.메소드()형식으로 쉽게 호출하도록 만들어짐

