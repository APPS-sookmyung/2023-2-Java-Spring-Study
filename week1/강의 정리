in은 InputStream타입, out은 PrintStream타입

1-1.변수명
- 첫번째 글자는 문자/$/_ 가능
- $, _ 외 특수 문자 사용 불가능
- 키워드, true, false, null은 변수명으로 사용 불가능

1-2.코드는 한 줄씩 출력됨
- println() - 값 출력->줄바꿈
- print() - 값 출력->줄바꿈X

1-3.논리형 타입, 논리 연산자
- 기본형 타입 primitive type, 레퍼런스 타입 reference type이 있음
- 기본형 타입은 논리, 문자, 정수, 실수형 존재
- 논리-boolean/정수-byte, short, int, long/실수-float, double/문자-char
-> 이 외는 대략 레퍼런스 타입으로 생각해보면 됨
- 논리연산자 &&/&(and), ||/|(or),^(XOR),!(not)
- 앞의 조건이 False가 나오면 &&는 뒷부분 실행X/&는 뒤의 식까지 실행

1-4.정수, 실수, 산술연산자
- byte=1byte/short=2byte/int=4byte/long=8byte
- 5L(5l)은 long타입
- double=소수 15자리, float=소수 6자리까지 표현 가능
- Integer.MAX_VALUE/Integer.MIN_VALUE 클래스로 정수의 최댓값, 최솟값 출력
- 최댓값에 +1을 하면 오버플로우로 음수가 출력됨(최댓값 01111111+1->10000000=음수임)

1-5.타입의 변환
- 저장할 수 있는 정도의 값만 변환해야함. 강제 형변환시 오류

1-6.문자타입
- ""로 표현한 문자는 string
-''로 표현하면 2byte의 유니코드 값을 가진 문자
- char타입은 0, 양수(음수X) 표현 가능/정수를 문자로, 문자를 정수로 변환할 수 있음

1-7.비트연산자
- 비트: 컴퓨터가 처리하는 정보의 최소단위->8bit=1byte
- ~(not)/<< 좌측 시프트/>> 우측 시프트/>>> 우측 양수화 시프트
- 우측으로 2 시프트 연산한 값 = 2^2로 나눈 값
- 좌측 시프트는 2^x만큼 곱한 값
- >>>는 지정한 비트 수만큼 오른쪽으로 이동시키면서 왼쪽은 0을 채움=양수로 바꿈

1-8.삼항 연산자와 instanceof연산자
- instanceof도 연산자임

1-9. 조건문 if와 삼항연산자
- if(조건문{블록})문법으로 사용, if(조건문{블록else{블록}})
- 삼항연산자 - 조건식 ? 반환값1:반환값2 문법으로 사용, 조건식이 참일 경우 반환값1/거짓일 경우 반환값2 사용

1-10.조건문 switch
- switch는 제어문 중 하나로 가독성이 좋을 수 있음
- switch(변수){
    case 값1:
      변수가 값1일 때 실행
    case 값2:
      변수가 값2일 때 실행
    default:
      변수 값이 어떤 case에도 해당되지 않을 때 실행
    }
- switch에선 string타입 사용 가능(JDK7 이상부터)

1-11. 반복문 while
- while은 반복문 중 하나
- while(탈출 조건식){
    탈출 조건식이 참일 경우 실행되는 코드
  }

1-12.반복문 do while
- do/while은 반복문 중 하나, 무조건 한 번은 실행됨
- do{
    탈출 조건식이 참일 경우 실행되는 코드
  }while(탈출 조건식)

1-13.반복문 for
- for문은 반복문 중 하나/변수 선언, 탈출 조건식, 증감식을 한 줄에 모두 푷ㄴ
- for(변수선언식;탈출조건식;증감식){블록}
- 중첩 반복문 - 반복문 안에 반복문
- 문자열+정수/불린/실수 -> 문자열

1-14.반복문과 라벨, break와 continue
- 중첩반복문을 빠져나가려면(continue 이하를 실행하지 않고 한 번에)label 사용
- break, continue는 가장 인접한 switch문만 빠져나온다는 한계가 있음
- 예제 outter:
      for(조건식1){
        if(조건식2){
          블록
        }
      }
  -> break outter: 라고 되어있으면 outter가 붙은 반복문이 종료됨
